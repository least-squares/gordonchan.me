{"meta":{"exported_on":1452287704139,"version":"000"},"data":{"posts":[{"id":1,"uuid":"c76929da-2dee-4d54-9ed8-e0344fb573f7","title":"Welcome to Ghost","slug":"welcome-to-ghost","markdown":"You're in! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. Go ahead and edit this post to get going and learn how it all works!\n\n## Getting Started\n\nWriting in markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use *formatting* shortcuts to style your content. For example, a list:\n\n* Item number one\n* Item number two\n    * A nested item\n* A final item\n\nor with numbers!\n\n1. Remember to buy some milk\n2. Drink the milk\n3. Tweet that I remembered to buy the milk, and drank it\n\n### Links\n\nWant to link to a source? No problem. If you paste in url, like http://ghost.org - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to [the Ghost website](http://ghost.org). Neat.\n\n### What about Images?\n\nImages work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:\n\n![The Ghost Logo](http://tryghost.org/ghost.png)\n\nNot sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:\n\n![A bowl of bananas]\n\n\n### Quoting\n\nSometimes a link isn't enough, you want to quote someone on what they've said. It was probably very wisdomous. Is wisdomous a word? Find out in a future release when we introduce spellcheck! For now - it's definitely a word.\n\n> Wisdomous - it's definitely a word.\n\n### Working with Code\n\nGot a streak of geek? We've got you covered there, too. You can write inline `<code>` blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.\n\n    .awesome-thing {\n        display: block;\n        width: 100%;\n    }\n\n### Ready for a Break? \n\nThrow 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.\n\n---\n\n### Advanced Usage\n\nThere's one fantastic secret about Markdown. If you want, you can  write plain old HTML and it'll still work! Very flexible.\n\n<input type=\"text\" placeholder=\"I'm an input field!\" />\n\nThat should be enough to get you started. Have fun - and let us know what you think :)","html":"<p>You're in! Nice. We've put together a little post to introduce you to the Ghost editor and get you started. Go ahead and edit this post to get going and learn how it all works!</p>\n\n<h2 id=\"gettingstarted\">Getting Started</h2>\n\n<p>Writing in markdown is really easy. In the left hand panel of Ghost, you simply write as you normally would. Where appropriate, you can use <em>formatting</em> shortcuts to style your content. For example, a list:</p>\n\n<ul>\n<li>Item number one</li>\n<li>Item number two\n<ul><li>A nested item</li></ul></li>\n<li>A final item</li>\n</ul>\n\n<p>or with numbers!</p>\n\n<ol>\n<li>Remember to buy some milk  </li>\n<li>Drink the milk  </li>\n<li>Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n\n<h3 id=\"links\">Links</h3>\n\n<p>Want to link to a source? No problem. If you paste in url, like <a href='http://ghost.org'>http://ghost.org</a> - it'll automatically be linked up. But if you want to customise your anchor text, you can do that too! Here's a link to <a href=\"http://ghost.org\">the Ghost website</a>. Neat.</p>\n\n<h3 id=\"whataboutimages\">What about Images?</h3>\n\n<p>Images work too! Already know the URL of the image you want to include in your article? Simply paste it in like this to make it show up:</p>\n\n<p><img src=\"http://tryghost.org/ghost.png\" alt=\"The Ghost Logo\" /></p>\n\n<p>Not sure which image you want to use yet? That's ok too. Leave yourself a descriptive placeholder and keep writing. Come back later and drag and drop the image in to upload:</p>\n\n<h3 id=\"quoting\">Quoting</h3>\n\n<p>Sometimes a link isn't enough, you want to quote someone on what they've said. It was probably very wisdomous. Is wisdomous a word? Find out in a future release when we introduce spellcheck! For now - it's definitely a word.</p>\n\n<blockquote>\n  <p>Wisdomous - it's definitely a word.</p>\n</blockquote>\n\n<h3 id=\"workingwithcode\">Working with Code</h3>\n\n<p>Got a streak of geek? We've got you covered there, too. You can write inline <code>&lt;code&gt;</code> blocks really easily with back ticks. Want to show off something more comprehensive? 4 spaces of indentation gets you there.</p>\n\n<pre><code>.awesome-thing {\n    display: block;\n    width: 100%;\n}\n</code></pre>\n\n<h3 id=\"readyforabreak\">Ready for a Break?</h3>\n\n<p>Throw 3 or more dashes down on any new line and you've got yourself a fancy new divider. Aw yeah.</p>\n\n<hr />\n\n<h3 id=\"advancedusage\">Advanced Usage</h3>\n\n<p>There's one fantastic secret about Markdown. If you want, you can  write plain old HTML and it'll still work! Very flexible.</p>\n\n<p><input type=\"text\" placeholder=\"I'm an input field!\" /></p>\n\n<p>That should be enough to get you started. Have fun - and let us know what you think :)</p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1381740381214,"created_by":1,"updated_at":1387162244335,"updated_by":1,"published_at":1381740381233,"published_by":1},{"id":2,"uuid":"dafeb7ab-99f8-47aa-a851-010d70d1bebf","title":"Building a functional Node.js app - Part 1","slug":"building-a-functional-node-js-app-part-1","markdown":"<hr />\n\n### Introduction\nThis will guide you through building a functional Node.js app deploying with Heroku. Node.js will be the light weight http server running in clusters, communicating with an Ember.js client in real-time on socket.io.\n\n<hr />\n\n### Getting Started\n\n* Install [Brunch.io](http://brunch.io/). More instructions below:\n\t* Mac OSX - [Click here](http://blog.stevenlu.com/2012/05/04/brunchio-on-mac-osx/)\n\t* Windows - [Click here](http://www.axelscript.com/2013/02/06/installing-brunch-io-on-windows/)\n\n* Check the project out on [Github](https://github.com/octapus/Brunch-Ember-Socket.io.git).\n* Create a brunch project. \n\n\t\t$-> brunch new <name of your project> --skeleton git://github.com/octapus/Brunch-Ember-Socket.io\n\n* Get dependencies for the project\n\t\t\n\t\t$-> npm install\n\tIt will build itself after the install.\n\t\n* Run the server and watch the project\n\n\t\t$-> brunch watch -server\n\t\t\n* You can then check out your browser \n\t\t\n\t\t http://localhost:3333\n\tYou will get something like this in return on the command prompt\n\t\t\n\t\tinfo  - socket.io started\n\t\t--- app listening on http://0.0.0.0:3333\n\t\t10 Apr 01:05:22 - info: compiled in 355ms\n\t\t   debug - served static content /socket.io.js\n\t\t   debug - client authorized\n\t\t   info  - handshake authorized xuGzgI4UBwYG-hzPVX18\n\t\t   debug - setting request GET /socket.io/1/websocket/xuGzgI4UBwYG-hzPVX18\n\t\t   debug - set heartbeat interval for client xuGzgI4UBwYG-hzPVX18\n\t\t   debug - client authorized for\n\t\t   debug - websocket writing 1::\n\tThis means you have a socket.io connection with your client.\n    \n<hr />\n    \n### Deploying to Heroku\n*\tYou can deploy this to heroku by this point. Make sure you have heroku installed or follow the instructions [here](https://toolbelt.heroku.com/).\n\n\tThe best thing is to test your app locally before deploying to heroku:\t\n\t\n\t\t$-> brunch build\n\t\t$-> foreman start\n\n\n*\tBy this point, you should have a remote heroku repository added to your git. Commit your changes to your git master. Then push this to your heroku remote repository.\n\n\t\t$-> git push heroku master\n\n*\tOpen your app up \n\n\t\t$-> heroku open\n\n\n* \t[Next](http://gordonchan.me/building-a-functional-node-js-app-part-2/), we will configure our Express app\n\n<hr />\n\n### Libraries\n[Brunch](http://brunch.io/) - Application assembler for HTML5 apps.\n\n[CoffeeScript](http://coffeescript.org/) - JavaScript annotations.\n\n[Express.js](http://expressjs.com) - Web app framework.\n\n[Socket.Io](http://socket.io) - WebSocket for realtime apps.\n\n[Passport](http://passportjs.org) - Authentication for Node.js.\n\n[Redis.io](http://redis.io/) - Advance data structure server.","html":"<hr />\n\n<h3 id=\"introduction\">Introduction</h3>\n\n<p>This will guide you through building a functional Node.js app deploying with Heroku. Node.js will be the light weight http server running in clusters, communicating with an Ember.js client in real-time on socket.io.</p>\n\n<hr />\n\n<h3 id=\"gettingstarted\">Getting Started</h3>\n\n<ul>\n<li><p>Install <a href=\"http://brunch.io/\">Brunch.io</a>. More instructions below:</p>\n\n<ul><li>Mac OSX - <a href=\"http://blog.stevenlu.com/2012/05/04/brunchio-on-mac-osx/\">Click here</a></li>\n<li>Windows - <a href=\"http://www.axelscript.com/2013/02/06/installing-brunch-io-on-windows/\">Click here</a></li></ul></li>\n<li><p>Check the project out on <a href=\"https://github.com/octapus/Brunch-Ember-Socket.io.git\">Github</a>.</p></li>\n<li><p>Create a brunch project. </p>\n\n<pre><code>$-&gt; brunch new &lt;name of your project&gt; --skeleton git://github.com/octapus/Brunch-Ember-Socket.io\n</code></pre></li>\n<li><p>Get dependencies for the project</p>\n\n<pre><code>$-&gt; npm install\n</code></pre>\n\n<p>It will build itself after the install.</p></li>\n<li><p>Run the server and watch the project</p>\n\n<pre><code>$-&gt; brunch watch -server\n</code></pre></li>\n<li><p>You can then check out your browser </p>\n\n<pre><code> http://localhost:3333\n</code></pre>\n\n<p>You will get something like this in return on the command prompt</p>\n\n<pre><code>info  - socket.io started\n--- app listening on http://0.0.0.0:3333\n10 Apr 01:05:22 - info: compiled in 355ms\n   debug - served static content /socket.io.js\n   debug - client authorized\n   info  - handshake authorized xuGzgI4UBwYG-hzPVX18\n   debug - setting request GET /socket.io/1/websocket/xuGzgI4UBwYG-hzPVX18\n   debug - set heartbeat interval for client xuGzgI4UBwYG-hzPVX18\n   debug - client authorized for\n   debug - websocket writing 1::\n</code></pre>\n\n<p>This means you have a socket.io connection with your client.</p></li>\n</ul>\n\n<hr />\n\n<h3 id=\"deployingtoheroku\">Deploying to Heroku</h3>\n\n<ul>\n<li><p>You can deploy this to heroku by this point. Make sure you have heroku installed or follow the instructions <a href=\"https://toolbelt.heroku.com/\">here</a>.</p>\n\n<p>The best thing is to test your app locally before deploying to heroku:  </p>\n\n<pre><code>$-&gt; brunch build\n$-&gt; foreman start\n</code></pre></li>\n<li><p>By this point, you should have a remote heroku repository added to your git. Commit your changes to your git master. Then push this to your heroku remote repository.</p>\n\n<pre><code>$-&gt; git push heroku master\n</code></pre></li>\n<li><p>Open your app up </p>\n\n<pre><code>$-&gt; heroku open\n</code></pre></li>\n<li><p><a href=\"http://gordonchan.me/building-a-functional-node-js-app-part-2/\">Next</a>, we will configure our Express app</p></li>\n</ul>\n\n<hr />\n\n<h3 id=\"libraries\">Libraries</h3>\n\n<p><a href=\"http://brunch.io/\">Brunch</a> - Application assembler for HTML5 apps.</p>\n\n<p><a href=\"http://coffeescript.org/\">CoffeeScript</a> - JavaScript annotations.</p>\n\n<p><a href=\"http://expressjs.com\">Express.js</a> - Web app framework.</p>\n\n<p><a href=\"http://socket.io\">Socket.Io</a> - WebSocket for realtime apps.</p>\n\n<p><a href=\"http://passportjs.org\">Passport</a> - Authentication for Node.js.</p>\n\n<p><a href=\"http://redis.io/\">Redis.io</a> - Advance data structure server.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1387164669477,"created_by":1,"updated_at":1387172717724,"updated_by":1,"published_at":1366905600000,"published_by":1},{"id":3,"uuid":"90c1eabf-e656-4792-923e-a11c8a181094","title":"Building a functional Node.js app - Part 2","slug":"building-a-functional-node-js-app-part-2","markdown":"<hr />\n\n### Configuring Node.js with express.js\n*\t[Previous](http://gordonchan.me/building-a-functional-node-js-app-part-1/) post.\n*\tRead more on express.js [here](http://expressjs.com/).\n*\tAdd Express configurations to server/express.coffee.\n\t\t\n\t\tapp.configure ->\n\t\t   app.use           base, express.static path\n\t\t   app.all           '#{base}/*', (request, response) ->\n\t\t     response.sendfile sysPath.join path, 'index.html'\n\t\t\n\t\t app.configure 'development', ->\n\t\t   app.use           express.logger()\n\t\t   app.use           express.errorHandler { \n\t\t     dumpExceptions: true, showStack: true \n\t\t   }\n\t\t app.configure 'production', ->\n\t\t   app.use           express.errorHandler()\n\t\t # --- listening ---\n\t\t server              = app.listen process.env.PORT || port, -> \n\t\t   addr              = server.address()\n\t\t   console.log       '--- app listening on http://' + addr.address + ':' + addr.port\t\t\n\n*\tMake sure to configure your heroku environment to production when your are ready to run it.\n\n\t\t$-> heroku config:add NODE_ENV=production\n\t\t\n* [Next](http://gordonchan.me/building-a-functional-node-js-app-part-3/), we set up simple socket.io sample.\n\n<hr />\n\n### Libraries\n[Brunch](http://brunch.io/) - Application assembler for HTML5 apps.\n\n[CoffeeScript](http://coffeescript.org/) - JavaScript annotations.\n\n[Express.js](http://expressjs.com) - Web app framework.\n\n[Socket.Io](http://socket.io) - WebSocket for realtime apps.\n\n[Passport](http://passportjs.org) - Authentication for Node.js.\n\n[Redis.io](http://redis.io/) - Advance data structure server.","html":"<hr />\n\n<h3 id=\"configuringnodejswithexpressjs\">Configuring Node.js with express.js</h3>\n\n<ul>\n<li><a href=\"http://gordonchan.me/building-a-functional-node-js-app-part-1/\">Previous</a> post.</li>\n<li>Read more on express.js <a href=\"http://expressjs.com/\">here</a>.</li>\n<li><p>Add Express configurations to server/express.coffee.</p>\n\n<pre><code>app.configure -&gt;\n   app.use           base, express.static path\n   app.all           '#{base}/*', (request, response) -&gt;\n     response.sendfile sysPath.join path, 'index.html'\n\n\n app.configure 'development', -&gt;\n   app.use           express.logger()\n   app.use           express.errorHandler { \n     dumpExceptions: true, showStack: true \n   }\n app.configure 'production', -&gt;\n   app.use           express.errorHandler()\n # --- listening ---\n server              = app.listen process.env.PORT || port, -&gt; \n   addr              = server.address()\n   console.log       '--- app listening on http://' + addr.address + ':' + addr.port        \n</code></pre></li>\n<li><p>Make sure to configure your heroku environment to production when your are ready to run it.</p>\n\n<pre><code>$-&gt; heroku config:add NODE_ENV=production\n</code></pre></li>\n<li><p><a href=\"http://gordonchan.me/building-a-functional-node-js-app-part-3/\">Next</a>, we set up simple socket.io sample.</p></li>\n</ul>\n\n<hr />\n\n<h3 id=\"libraries\">Libraries</h3>\n\n<p><a href=\"http://brunch.io/\">Brunch</a> - Application assembler for HTML5 apps.</p>\n\n<p><a href=\"http://coffeescript.org/\">CoffeeScript</a> - JavaScript annotations.</p>\n\n<p><a href=\"http://expressjs.com\">Express.js</a> - Web app framework.</p>\n\n<p><a href=\"http://socket.io\">Socket.Io</a> - WebSocket for realtime apps.</p>\n\n<p><a href=\"http://passportjs.org\">Passport</a> - Authentication for Node.js.</p>\n\n<p><a href=\"http://redis.io/\">Redis.io</a> - Advance data structure server.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1387166383532,"created_by":1,"updated_at":1387170062609,"updated_by":1,"published_at":1368633600000,"published_by":1},{"id":5,"uuid":"dcc81208-5309-42b2-80aa-a412295d74c6","title":"Building a functional Node.js app - Part 3","slug":"building-a-functional-node-js-app-part-3","markdown":"<hr />\n\n### Socket.Io Configuration\n* \t[Previous](http://gordonchan.me/building-a-functional-node-js-app-part-2/) post\n*\tAdd socket.io configurations to server/express.coffee\n\t\t\n\t\t# --- socket.io ---\n\t\tio                  = require('socket.io').listen(server)\n\t\tio.configure 'development', ->\n\t\t  console.log       'socket.io is running on development environment'\n\t\t  io.set            'log level', 5 \n\t\t  io.set            'transports', [ 'websocket'\n\t\t                                    'htmlfile'\n\t\t                                    'jsonp-polling'\n\t\t                                    'xhr-polling' ]\n\t\t  io.set            'polling duration', 5\n\t\tio.configure 'production', ->\n\t\t  console.log       'socket.io is running on heroku environment'\n\t\t  io.enable         'browser client minifaction'\n\t\t  io.enable         'browser client etag'\n\t\t  io.enable         'browser client gzip'\n\t\t  io.set            'log level', 1 \n\t\t  io.set            'transports', [ 'xhr-polling' ]\n\t\t  io.set            'polling duration', 10\n          \n\t\t# -> '/' \n\t\tio.sockets.on 'connection', (socket) ->\n\t\t  handshake         = socket.handshake\n\t\t  socket.emit       'greeting', { msg: 'This message is sent from socket.io' }\n          \n\t\t# -> '/member'\n\t\tio.of('/member').authorization (handshake, accept) ->\n\t\t  accept null, true\n\t\t.on 'connection', (socket) ->\n\t\t  socket.emit 'name', { first: 'John' }\n\t\t  \n<hr />\n\n### Ember.js Routes\n* \tAdd listener to Ember routes\n\n\tapp/routes/indexRoute.coffee:\n\t\t\n\t\tApp.IndexRoute = Em.Route.extend\n\t\t  setupController: (controller) ->\n\t\t    socket = io.connect()\n            socket.on 'error', (reason) ->\n\t\t      console.error 'Unable to connect to socket.io', reason\n\t\t      console.dir socket.socket\n\t\t    socket.on 'greeting', (data) ->\n\t\t      controller.set('msg', data.msg)\n\t\t      \n\tapp/routes/memberRoute.coffee:\n\t\n\t\tApp.MemberRoute = Em.Route.extend\n\t\t  route: '/member',\n\t\t  setupController: (controller) ->\n\t\t    socket = io.connect('/member')\n\t\t    socket.on 'error', (reason) ->\n\t\t      console.error 'Unable to connect to socket.io', reason\n\t\t      console.dir socket.socket\n\t\t    socket.on 'name', (data) ->\n\t\t      controller.set('info', data.first)\n\t\t      \n\t\t      \n*    [Next](http://gordonchan.me/building-a-functional-node-js-app-part-4/), add scalability with Redis session store\n\n<hr />\n\n### Libraries\n[Brunch](http://brunch.io/) - Application assembler for HTML5 apps.\n\n[CoffeeScript](http://coffeescript.org/) - JavaScript annotations.\n\n[Express.js](http://expressjs.com) - Web app framework.\n\n[Socket.Io](http://socket.io) - WebSocket for realtime apps.\n\n[Passport](http://passportjs.org) - Authentication for Node.js.\n\n[Redis.io](http://redis.io/) - Advance data structure server.","html":"<hr />\n\n<h3 id=\"socketioconfiguration\">Socket.Io Configuration</h3>\n\n<ul>\n<li><a href=\"http://gordonchan.me/building-a-functional-node-js-app-part-2/\">Previous</a> post</li>\n<li><p>Add socket.io configurations to server/express.coffee</p>\n\n<pre><code># --- socket.io ---\nio                  = require('socket.io').listen(server)\nio.configure 'development', -&gt;\n  console.log       'socket.io is running on development environment'\n  io.set            'log level', 5 \n  io.set            'transports', [ 'websocket'\n                                    'htmlfile'\n                                    'jsonp-polling'\n                                    'xhr-polling' ]\n  io.set            'polling duration', 5\nio.configure 'production', -&gt;\n  console.log       'socket.io is running on heroku environment'\n  io.enable         'browser client minifaction'\n  io.enable         'browser client etag'\n  io.enable         'browser client gzip'\n  io.set            'log level', 1 \n  io.set            'transports', [ 'xhr-polling' ]\n  io.set            'polling duration', 10\n\n\n# -&gt; '/' \nio.sockets.on 'connection', (socket) -&gt;\n  handshake         = socket.handshake\n  socket.emit       'greeting', { msg: 'This message is sent from socket.io' }\n\n\n# -&gt; '/member'\nio.of('/member').authorization (handshake, accept) -&gt;\n  accept null, true\n.on 'connection', (socket) -&gt;\n  socket.emit 'name', { first: 'John' }\n</code></pre></li>\n</ul>\n\n<hr />\n\n<h3 id=\"emberjsroutes\">Ember.js Routes</h3>\n\n<ul>\n<li><p>Add listener to Ember routes</p>\n\n<p>app/routes/indexRoute.coffee:</p>\n\n<pre><code>App.IndexRoute = Em.Route.extend\n  setupController: (controller) -&gt;\n    socket = io.connect()\n    socket.on 'error', (reason) -&gt;\n      console.error 'Unable to connect to socket.io', reason\n      console.dir socket.socket\n    socket.on 'greeting', (data) -&gt;\n      controller.set('msg', data.msg)\n</code></pre>\n\n<p>app/routes/memberRoute.coffee:</p>\n\n<pre><code>App.MemberRoute = Em.Route.extend\n  route: '/member',\n  setupController: (controller) -&gt;\n    socket = io.connect('/member')\n    socket.on 'error', (reason) -&gt;\n      console.error 'Unable to connect to socket.io', reason\n      console.dir socket.socket\n    socket.on 'name', (data) -&gt;\n      controller.set('info', data.first)\n</code></pre></li>\n<li><p><a href=\"http://gordonchan.me/building-a-functional-node-js-app-part-4/\">Next</a>, add scalability with Redis session store</p></li>\n</ul>\n\n<hr />\n\n<h3 id=\"libraries\">Libraries</h3>\n\n<p><a href=\"http://brunch.io/\">Brunch</a> - Application assembler for HTML5 apps.</p>\n\n<p><a href=\"http://coffeescript.org/\">CoffeeScript</a> - JavaScript annotations.</p>\n\n<p><a href=\"http://expressjs.com\">Express.js</a> - Web app framework.</p>\n\n<p><a href=\"http://socket.io\">Socket.Io</a> - WebSocket for realtime apps.</p>\n\n<p><a href=\"http://passportjs.org\">Passport</a> - Authentication for Node.js.</p>\n\n<p><a href=\"http://redis.io/\">Redis.io</a> - Advance data structure server.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1387168082632,"created_by":1,"updated_at":1387170080672,"updated_by":1,"published_at":1372089600000,"published_by":1},{"id":6,"uuid":"c9e2a908-1cf8-41ee-ad7c-707179f30883","title":"Building a functional Node.js app - Part 4","slug":"building-a-functional-node-js-app-part-4","markdown":"<hr />\n\n### Add scalability with Redis session store\n\n*\t[Previous](http://gordonchan.me/building-a-functional-node-js-app-part-3/) post.\n\n*\tAdd redis dependencies to the package.json or just type:\n\n\t\t$-> npm install --save redis\n\t\t$-> npm install --save connect-redis\n\n\n*\tAdd redis to server/express.coffee.\n\t\t\n\t\t# --- session ---\n\t\t  if process.env.REDISTOGO_URL?\n\t\t    console.log '--- using Redis remote store'\n\t\t    redisToGo         = require('url').parse(process.env.REDISTOGO_URL)\n\t\t    pub               = redis.createClient redisToGo.port, redisToGo.hostname\n\t\t    pub.auth          redisToGo.auth.split(':')[1]\n\t\t    sub               = redis.createClient redisToGo.port, redisToGo.hostname\n\t\t    sub.auth          redisToGo.auth.split(':')[1]\n\t\t    client            = redis.createClient redisToGo.port, redisToGo.hostname\n\t\t    client.auth       redisToGo.auth.split(':')[1]\n\t\t  else\n\t\t    console.log '--- using Redis local store'\n\t\t    pub               = redis.createClient()\n\t\t    sub               = redis.createClient()\n\t\t    client            = redis.createClient()\n\t\t  sessionStore        = new RedisStore {\n\t\t    pub:     pub,\n\t\t    sub:     sub,\n\t\t    client:  client\n\t\t  }\n\t\t  sessionConfig       = {\n\t\t    key:     'express.pid',\n\t\t    secret:  process.env.CLIENT_SECRET || 'mysecret'\n\t\t    store:   sessionStore,\n\t\t    cookie:  { maxAge: 60 * 60 * 1000 }    \n\t\t  }\n\t\t  \n\tThis is configure to run on your local redis server. Get it from [here](http://redis.io/download) and run the redis server on your machine.\n\t\t\n\t\t$-> redis-server\n\t\t\n\tAnd it will know to run on from your remote redis server if the heroku configure varaiable REDISTOGO_URL is set. Set it by:\n\t\n\t\t $-> heroku config:add REDISTOGO_URL=<your redis server address>\n\t\t  \n*   [Next](http://gordonchan.me/building-a-functional-node-js-app-part-5/), we will add authentication to our single page app.\n\n<hr />\n\n### Libraries\n[Brunch](http://brunch.io/) - Application assembler for HTML5 apps.\n\n[CoffeeScript](http://coffeescript.org/) - JavaScript annotations.\n\n[Express.js](http://expressjs.com) - Web app framework.\n\n[Socket.Io](http://socket.io) - WebSocket for realtime apps.\n\n[Passport](http://passportjs.org) - Authentication for Node.js.\n\n[Redis.io](http://redis.io/) - Advance data structure server.","html":"<hr />\n\n<h3 id=\"addscalabilitywithredissessionstore\">Add scalability with Redis session store</h3>\n\n<ul>\n<li><p><a href=\"http://gordonchan.me/building-a-functional-node-js-app-part-3/\">Previous</a> post.</p></li>\n<li><p>Add redis dependencies to the package.json or just type:</p>\n\n<pre><code>$-&gt; npm install --save redis\n$-&gt; npm install --save connect-redis\n</code></pre></li>\n<li><p>Add redis to server/express.coffee.</p>\n\n<pre><code># --- session ---\n  if process.env.REDISTOGO_URL?\n    console.log '--- using Redis remote store'\n    redisToGo         = require('url').parse(process.env.REDISTOGO_URL)\n    pub               = redis.createClient redisToGo.port, redisToGo.hostname\n    pub.auth          redisToGo.auth.split(':')[1]\n    sub               = redis.createClient redisToGo.port, redisToGo.hostname\n    sub.auth          redisToGo.auth.split(':')[1]\n    client            = redis.createClient redisToGo.port, redisToGo.hostname\n    client.auth       redisToGo.auth.split(':')[1]\n  else\n    console.log '--- using Redis local store'\n    pub               = redis.createClient()\n    sub               = redis.createClient()\n    client            = redis.createClient()\n  sessionStore        = new RedisStore {\n    pub:     pub,\n    sub:     sub,\n    client:  client\n  }\n  sessionConfig       = {\n    key:     'express.pid',\n    secret:  process.env.CLIENT_SECRET || 'mysecret'\n    store:   sessionStore,\n    cookie:  { maxAge: 60 * 60 * 1000 }    \n  }\n</code></pre>\n\n<p>This is configure to run on your local redis server. Get it from <a href=\"http://redis.io/download\">here</a> and run the redis server on your machine.</p>\n\n<pre><code>$-&gt; redis-server\n</code></pre>\n\n<p>And it will know to run on from your remote redis server if the heroku configure varaiable REDISTOGO_URL is set. Set it by:</p>\n\n<pre><code> $-&gt; heroku config:add REDISTOGO_URL=&lt;your redis server address&gt;\n</code></pre></li>\n<li><p><a href=\"http://gordonchan.me/building-a-functional-node-js-app-part-5/\">Next</a>, we will add authentication to our single page app.</p></li>\n</ul>\n\n<hr />\n\n<h3 id=\"libraries\">Libraries</h3>\n\n<p><a href=\"http://brunch.io/\">Brunch</a> - Application assembler for HTML5 apps.</p>\n\n<p><a href=\"http://coffeescript.org/\">CoffeeScript</a> - JavaScript annotations.</p>\n\n<p><a href=\"http://expressjs.com\">Express.js</a> - Web app framework.</p>\n\n<p><a href=\"http://socket.io\">Socket.Io</a> - WebSocket for realtime apps.</p>\n\n<p><a href=\"http://passportjs.org\">Passport</a> - Authentication for Node.js.</p>\n\n<p><a href=\"http://redis.io/\">Redis.io</a> - Advance data structure server.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1387170246198,"created_by":1,"updated_at":1387170718519,"updated_by":1,"published_at":1372435200000,"published_by":1},{"id":7,"uuid":"5f354113-8c4b-433f-9bb9-aa6cf237b2be","title":"Building a functional Node.js app - Part 5","slug":"building-a-functional-node-js-app-part-5","markdown":"<hr />\n### Authentication on a Single page app\n\n*\t[Previous](http://gordonchan.me/building-a-functional-node-js-app-part-4/) post\n*\tIn order to tie up the client side to the server side authentication, we will be using passport on the server and ember-auth on the client side for authentication. The client will request for an access token from the server in the beginning of the process. Then the client can use this access token on subsequent requests to authenticate with the server.\n\n*\tThe beauty of passport is that it supports more than 120 different authentication strategies. To begin, we are using the local user/password strategy. Later, we will add twitter signin.\n\n\t\t$-> npm install --save passport\n\t\t$-> npm install --save passport-local\n\t\t\n*\tWe will need an OAuth provider to create our access tokens on the server. \n\t\t\n\t\t$-> npm install --save oauth2orize\n\t\t\n* \tLet's add authentication on the client side.\n\n\t\t$-> npm install --save ember-auth\n\n\n### Server side (Node.js)\n*\tFirst, we will create a local strategy configuration by checking for the user and password.\n\t\t\n\t\t# Local Strategy\n\t\tpassport.use new LocalStrategy (username, password, done) ->\n\t\t  console.log 'local Strategy'\n\t\t  db.users.findByUsername username, (err, user) ->\n\t\t    return done err if err\n\t\t    return done null, false if !user?\n\t\t    return done null, false if user.password isnt password\n\t\t    done null, user\t\t  \n\n*\tWe must serialize the user to the session and deserialize it to get the user. Usually, we can just serialize the user ID.\n\t\t\n\t\tpassport.serializeUser (user, done) ->\n\t\t  done null, user.id\n\t\t\n\t\tpassport.deserializeUser (id, done) ->\n\t\t  db.users.find id, (err, user) ->\n\t\t    done null, user\n\t\t    \n*\tAnd how do we find these users? Here it is…\n\n\t\tusers = [\n\t\t  { id: 1, username: 'bob', password: 'secret', name: 'Bob Smith', email: 'bob@example.com' },\n\t\t  { id: 2, username: 'joe', password: 'password', name: 'Joe Davis', email: 'joe@example.com' }\n\t\t]\n\t\t\n\t\texports.find = (id, done) ->\n\t\t  for user in users \n\t\t    return done null, user if user.id is id\n\t\t    done new Error('User ' + id + ' does not exist'), null\n\t\t\n\t\texports.findByUsername = (username, done) ->\n\t\t  for user in users\n\t\t    return done null, user if user.username is username\n\t\t    done null, null\n\n*\tBefore we move on to the client side, we need to setup our OAuth provider through OAuth2orize.\n\n\t\toauth2orize     = require 'oauth2orize'\n\t\tpassport        = require 'passport'\n\t\tlogin           = require 'connect-ensure-login'\n\t\tdb              = require '../db'\n\t\tutils           = oauth2orize.utils\n\n\t\tserver = oauth2orize.createServer()\n\t\t\n\t\tserver.serializeClient (client, done) ->\n\t\t  done null, client.id\n\t\t\n\t\tserver.deserializeClient (id, done) ->\n\t\t  db.clients.find id, (err, client) ->\n\t\t    done err if err\n\t\t    done null, client\n\t\n\t\tserver.grant oauth2orize.grant.code (client, redirectURI, user, ares, done) ->\n\t\t  code = utils.uid 16\n\t\t  db.authorizationCodes.save code, client.id, redirectURI, user.id, (err) ->\n\t\t    done err if err\n\t\t    done null, code\n\t\t\n\t\tserver.exchange oauth2orize.exchange.code (client, code, redirectURI, done) ->\n\t\t  db.authorizationCodes.find code, (err, authCode) ->\n\t\t    done err if err\n\t\t    done null, false if client.id is not authCode.clientID\n\t\t    done null, false if redirectURI is not authCode.redirectURI\n\t\t\n\t\t    token = utils.uid 16\n\t\t    db.accessTokens.save token, authCode.userID, authCode.clientID, (err) ->\n\t\t      done err if err\n\t\t      done null, token\n\t\t      \n\t\texports.authorization = [\n\t\t  login.ensureLoggedIn(),\n\t\t  server.authorization (clientID, redirectURI, done) ->\n\t\t    db.clients.findByClientId clientID, (err, client) ->\n\t\t      done err if err\n\t\t      done null, client, redirectURI,\n\t\t  (req, res) ->\n\t\t    res.render 'dialog', { transacationID: req.oauth2.transactionID, user: req.user, client: req.oauth2.client }\n\t\t]\n\t\t\n\t\texports.decision = [\n\t\t  login.ensureLoggedIn(),\n\t\t  server.decision()\n\t\t]\n\t\t\n\t\texports.token = [\n\t\t  passport.authenticate([ 'basic', 'oauth2-client-password' ], { session: false }),\n\t\t  server.token(),\n\t\t  server.errorHandler()\n\t\t]\n\t\t\n\tLets provide the endpoint for OAuth2.\n\t\n\t\tapp.post '/login', passport.autheticate('local')\n\t\tapp.get '\n\t\t\n*\tWith this in place, it is easy to secure your API endpoints like this.\n\n\t\tapp.get '/api/user/:userid', passport('local'), (req, res) ->\n\t\t  res.json db.users.find req.params.userid\n          \n*\tNext we will tie this up with the Ember.js front-end.\n\n<hr />\n\n### Libraries\n[Brunch](http://brunch.io/) - Application assembler for HTML5 apps.\n\n[CoffeeScript](http://coffeescript.org/) - JavaScript annotations.\n\n[Express.js](http://expressjs.com) - Web app framework.\n\n[Socket.Io](http://socket.io) - WebSocket for realtime apps.\n\n[Passport](http://passportjs.org) - Authentication for Node.js.\n\n[Redis.io](http://redis.io/) - Advance data structure server.","html":"<hr />  \n\n<h3 id=\"authenticationonasinglepageapp\">Authentication on a Single page app</h3>\n\n<ul>\n<li><a href=\"http://gordonchan.me/building-a-functional-node-js-app-part-4/\">Previous</a> post</li>\n<li><p>In order to tie up the client side to the server side authentication, we will be using passport on the server and ember-auth on the client side for authentication. The client will request for an access token from the server in the beginning of the process. Then the client can use this access token on subsequent requests to authenticate with the server.</p></li>\n<li><p>The beauty of passport is that it supports more than 120 different authentication strategies. To begin, we are using the local user/password strategy. Later, we will add twitter signin.</p>\n\n<pre><code>$-&gt; npm install --save passport\n$-&gt; npm install --save passport-local\n</code></pre></li>\n<li><p>We will need an OAuth provider to create our access tokens on the server. </p>\n\n<pre><code>$-&gt; npm install --save oauth2orize\n</code></pre></li>\n<li><p>Let's add authentication on the client side.</p>\n\n<pre><code>$-&gt; npm install --save ember-auth\n</code></pre></li>\n</ul>\n\n<h3 id=\"serversidenodejs\">Server side (Node.js)</h3>\n\n<ul>\n<li><p>First, we will create a local strategy configuration by checking for the user and password.</p>\n\n<pre><code># Local Strategy\npassport.use new LocalStrategy (username, password, done) -&gt;\n  console.log 'local Strategy'\n  db.users.findByUsername username, (err, user) -&gt;\n    return done err if err\n    return done null, false if !user?\n    return done null, false if user.password isnt password\n    done null, user       \n</code></pre></li>\n<li><p>We must serialize the user to the session and deserialize it to get the user. Usually, we can just serialize the user ID.</p>\n\n<pre><code>passport.serializeUser (user, done) -&gt;\n  done null, user.id\n\n\npassport.deserializeUser (id, done) -&gt;\n  db.users.find id, (err, user) -&gt;\n    done null, user\n</code></pre></li>\n<li><p>And how do we find these users? Here it is…</p>\n\n<pre><code>users = [\n  { id: 1, username: 'bob', password: 'secret', name: 'Bob Smith', email: 'bob@example.com' },\n  { id: 2, username: 'joe', password: 'password', name: 'Joe Davis', email: 'joe@example.com' }\n]\n\n\nexports.find = (id, done) -&gt;\n  for user in users \n    return done null, user if user.id is id\n    done new Error('User ' + id + ' does not exist'), null\n\n\nexports.findByUsername = (username, done) -&gt;\n  for user in users\n    return done null, user if user.username is username\n    done null, null\n</code></pre></li>\n<li><p>Before we move on to the client side, we need to setup our OAuth provider through OAuth2orize.</p>\n\n<pre><code>oauth2orize     = require 'oauth2orize'\npassport        = require 'passport'\nlogin           = require 'connect-ensure-login'\ndb              = require '../db'\nutils           = oauth2orize.utils\n\n\nserver = oauth2orize.createServer()\n\n\nserver.serializeClient (client, done) -&gt;\n  done null, client.id\n\n\nserver.deserializeClient (id, done) -&gt;\n  db.clients.find id, (err, client) -&gt;\n    done err if err\n    done null, client\n\n\nserver.grant oauth2orize.grant.code (client, redirectURI, user, ares, done) -&gt;\n  code = utils.uid 16\n  db.authorizationCodes.save code, client.id, redirectURI, user.id, (err) -&gt;\n    done err if err\n    done null, code\n\n\nserver.exchange oauth2orize.exchange.code (client, code, redirectURI, done) -&gt;\n  db.authorizationCodes.find code, (err, authCode) -&gt;\n    done err if err\n    done null, false if client.id is not authCode.clientID\n    done null, false if redirectURI is not authCode.redirectURI\n\n\n<pre><code>token = utils.uid 16\ndb.accessTokens.save token, authCode.userID, authCode.clientID, (err) -&amp;gt;\n  done err if err\n  done null, token\n</code></pre>\n\nexports.authorization = [\n  login.ensureLoggedIn(),\n  server.authorization (clientID, redirectURI, done) -&gt;\n    db.clients.findByClientId clientID, (err, client) -&gt;\n      done err if err\n      done null, client, redirectURI,\n  (req, res) -&gt;\n    res.render 'dialog', { transacationID: req.oauth2.transactionID, user: req.user, client: req.oauth2.client }\n]\n\n\nexports.decision = [\n  login.ensureLoggedIn(),\n  server.decision()\n]\n\n\nexports.token = [\n  passport.authenticate([ 'basic', 'oauth2-client-password' ], { session: false }),\n  server.token(),\n  server.errorHandler()\n]\n</code></pre>\n\n<p>Lets provide the endpoint for OAuth2.</p>\n\n<pre><code>app.post '/login', passport.autheticate('local')\napp.get '\n</code></pre></li>\n<li><p>With this in place, it is easy to secure your API endpoints like this.</p>\n\n<pre><code>app.get '/api/user/:userid', passport('local'), (req, res) -&gt;\n  res.json db.users.find req.params.userid\n</code></pre></li>\n<li><p>Next we will tie this up with the Ember.js front-end.</p></li>\n</ul>\n\n<hr />\n\n<h3 id=\"libraries\">Libraries</h3>\n\n<p><a href=\"http://brunch.io/\">Brunch</a> - Application assembler for HTML5 apps.</p>\n\n<p><a href=\"http://coffeescript.org/\">CoffeeScript</a> - JavaScript annotations.</p>\n\n<p><a href=\"http://expressjs.com\">Express.js</a> - Web app framework.</p>\n\n<p><a href=\"http://socket.io\">Socket.Io</a> - WebSocket for realtime apps.</p>\n\n<p><a href=\"http://passportjs.org\">Passport</a> - Authentication for Node.js.</p>\n\n<p><a href=\"http://redis.io/\">Redis.io</a> - Advance data structure server.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1387170628106,"created_by":1,"updated_at":1387170839997,"updated_by":1,"published_at":1378656000000,"published_by":1},{"id":8,"uuid":"5624b50d-62f4-49b2-a3a8-7057b7f91391","title":"ASP.NET WebAPI with Ember.js","slug":"asp-net-webapi-with-ember-js","markdown":"Recently, I had just finished a project for a client where I combined an ASP.NET Web API backend, integrated with Dynamics CRM and other legacy systems, with Ember.js as the frontend. The back-end uses entity framework  and ember data to communicate with the front-end. \n\n#####Includes an Infinity scroll:\n![debtor-grid](/content/images/2013/Dec/debtors_grid-1.jpg)\n\n#####Bootstrap 3.0\n![debtoraccount](/content/images/2013/Dec/debtoraccount-3.jpg)\n\n![debtoraccount2](/content/images/2013/Dec/debtoraccount2-4.jpg)\n\nI intent to write a quick guide in the near future. Meanwhile, follow my [Github](https://github.com/octapus/Hunter-Warfield) account for more information.\n\n######Please email me for access to this project. Thanks.","html":"<p>Recently, I had just finished a project for a client where I combined an ASP.NET Web API backend, integrated with Dynamics CRM and other legacy systems, with Ember.js as the frontend. The back-end uses entity framework  and ember data to communicate with the front-end. </p>\n\n<h5 id=\"includesaninfinityscroll\">Includes an Infinity scroll:</h5>\n\n<p><img src=\"/content/images/2013/Dec/debtors_grid-1.jpg\" alt=\"debtor-grid\" /></p>\n\n<h5 id=\"bootstrap30\">Bootstrap 3.0</h5>\n\n<p><img src=\"/content/images/2013/Dec/debtoraccount-3.jpg\" alt=\"debtoraccount\" /></p>\n\n<p><img src=\"/content/images/2013/Dec/debtoraccount2-4.jpg\" alt=\"debtoraccount2\" /></p>\n\n<p>I intent to write a quick guide in the near future. Meanwhile, follow my <a href=\"https://github.com/octapus/Hunter-Warfield\">Github</a> account for more information.</p>\n\n<h6 id=\"pleaseemailmeforaccesstothisprojectthanks\">Please email me for access to this project. Thanks.</h6>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1387171762620,"created_by":1,"updated_at":1387175731708,"updated_by":1,"published_at":1384016400000,"published_by":1},{"id":9,"uuid":"5f1c989e-e45a-4de0-be7c-5e6cb2b253c1","title":"ASP.NET web forms style to Bootstrap","slug":"asp-net-web-forms-style-to-bootstrap","markdown":"Login form\n\n*\tBefore:\n![beforelogin](/content/images/2013/Dec/before_login.jpg)\n*\tAfter:\n![afterlogin1](/content/images/2013/Dec/after_login-1.jpg)\n\n![afterlogin2](/content/images/2013/Dec/after_login2.jpg)\n\n\nEmail\n\n*\tBefore:\n![beforeemail](/content/images/2013/Dec/before_email.jpg)\n* \tAfter:\n![afteremail](/content/images/2013/Dec/after_email-1.jpg)\n","html":"<p>Login form</p>\n\n<ul>\n<li>Before:\n<img src=\"/content/images/2013/Dec/before_login.jpg\" alt=\"beforelogin\" /></li>\n<li>After:\n<img src=\"/content/images/2013/Dec/after_login-1.jpg\" alt=\"afterlogin1\" /></li>\n</ul>\n\n<p><img src=\"/content/images/2013/Dec/after_login2.jpg\" alt=\"afterlogin2\" /></p>\n\n<p>Email</p>\n\n<ul>\n<li>Before:\n<img src=\"/content/images/2013/Dec/before_email.jpg\" alt=\"beforeemail\" /></li>\n<li>After:\n<img src=\"/content/images/2013/Dec/after_email-1.jpg\" alt=\"afteremail\" /></li>\n</ul>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1387172666393,"created_by":1,"updated_at":1387332750952,"updated_by":1,"published_at":1386954000000,"published_by":1},{"id":10,"uuid":"026b765d-2610-4935-b905-4dfe26a789c6","title":"Github","slug":"github","markdown":"Please follow me on my github account @ [https://github.com/octapus](https://github.com/octapus) to keep up with my latest projects. Thank you.","html":"<p>Please follow me on my github account @ <a href=\"https://github.com/octapus\">https://github.com/octapus</a> to keep up with my latest projects. Thank you.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1387229039510,"created_by":1,"updated_at":1387229167038,"updated_by":1,"published_at":1355677200000,"published_by":1}],"users":[{"id":1,"uuid":"4cb9090d-1588-4bf0-b86f-68345da84931","name":"Gordon Chan","slug":"gordon-chan","password":"$2a$10$Cd74a26Bxr1hjr9tIc4vw.aBOV78Kn2bxJN3H3p5FOnIex4AGaFRe","email":"ideveloper.gtc@gmail.com","image":"/content/images/2013/Dec/me3.png","cover":"/content/images/2014/Jan/www_madebyvadim_com-1.jpg","bio":"","website":"","location":"Austin, Texas","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":null,"created_at":1387148943227,"created_by":1,"updated_at":1450216345364,"updated_by":1}],"roles":[{"id":1,"uuid":"5e7d601c-af9e-4c7d-a09f-02bfa26c1197","name":"Administrator","description":"Administrators","created_at":1381740381279,"created_by":1,"updated_at":1381740381279,"updated_by":1},{"id":2,"uuid":"7c2f88ac-9933-4364-adc1-6c6fc2b3e2ba","name":"Editor","description":"Editors","created_at":1381740381285,"created_by":1,"updated_at":1381740381285,"updated_by":1},{"id":3,"uuid":"6afe1312-4470-4011-967a-9193062ddcb3","name":"Author","description":"Authors","created_at":1381740381293,"created_by":1,"updated_at":1381740381293,"updated_by":1}],"roles_users":[{"id":1,"role_id":1,"user_id":1}],"permissions":[{"id":1,"uuid":"5d6b21ff-2eba-47ea-9c59-1b0ae6e28773","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1381740381298,"created_by":1,"updated_at":1381740381298,"updated_by":1},{"id":2,"uuid":"9cfaf42a-0d93-402b-a6af-ad859f1c14b7","name":"Remove posts","object_type":"post","action_type":"remove","object_id":null,"created_at":1381740381303,"created_by":1,"updated_at":1381740381303,"updated_by":1},{"id":3,"uuid":"16819914-065c-4e8b-aaa9-f2b31874dfa0","name":"Create posts","object_type":"post","action_type":"create","object_id":null,"created_at":1381740381307,"created_by":1,"updated_at":1381740381307,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":1,"role_id":1,"permission_id":1},{"id":2,"role_id":1,"permission_id":2},{"id":3,"role_id":1,"permission_id":3}],"settings":[{"id":1,"uuid":"9189a01c-f5a9-4fed-ae21-00aef7f73cd0","key":"databaseVersion","value":"000","type":"core","created_at":1381740381326,"created_by":1,"updated_at":1381740381326,"updated_by":1},{"id":2,"uuid":"713099b6-17e9-4025-a1eb-fae2f90bce8f","key":"title","value":"Gordon Chan","type":"blog","created_at":1381740381327,"created_by":1,"updated_at":1439360814539,"updated_by":1},{"id":3,"uuid":"43fb75ad-92f1-4c9e-bc69-e9b42067d42e","key":"description","value":"Making the world better, one line of code at a time.","type":"blog","created_at":1381740381327,"created_by":1,"updated_at":1439360814542,"updated_by":1},{"id":4,"uuid":"bd4b0510-46be-429e-9b58-c84ec312d9df","key":"email","value":"ideveloper.gtc@gmail.com","type":"blog","created_at":1381740381328,"created_by":1,"updated_at":1439360814545,"updated_by":1},{"id":5,"uuid":"b4229389-05d3-4680-bc0a-b3b5d8bbeadb","key":"logo","value":"/content/images/2013/Dec/me3-1.png","type":"blog","created_at":1381740381329,"created_by":1,"updated_at":1439360814549,"updated_by":1},{"id":6,"uuid":"5e57383a-1a7f-41ac-b110-20fd942e8a56","key":"cover","value":"/content/images/2014/Jan/Top_view.jpg","type":"blog","created_at":1381740381329,"created_by":1,"updated_at":1439360814550,"updated_by":1},{"id":7,"uuid":"9d0bbb6f-6f8f-4d86-b19d-77ded93d6104","key":"defaultLang","value":"en_US","type":"blog","created_at":1381740381330,"created_by":1,"updated_at":1439360814552,"updated_by":1},{"id":8,"uuid":"be28760d-1bdc-4aac-9bd4-85d005a6ec3d","key":"postsPerPage","value":"6","type":"blog","created_at":1381740381331,"created_by":1,"updated_at":1439360814553,"updated_by":1},{"id":9,"uuid":"8734ae95-279b-414e-bf0b-f0131c02cd68","key":"forceI18n","value":"true","type":"blog","created_at":1381740381331,"created_by":1,"updated_at":1439360814555,"updated_by":1},{"id":10,"uuid":"6161de49-2b6a-4e47-9039-6bb7342713d2","key":"activeTheme","value":"casper","type":"theme","created_at":1381740381332,"created_by":1,"updated_at":1439360814557,"updated_by":1},{"id":11,"uuid":"01df6100-a1fc-43aa-9692-1e5f270db096","key":"activePlugins","value":"[]","type":"plugin","created_at":1381740381332,"created_by":1,"updated_at":1381740381332,"updated_by":1},{"id":12,"uuid":"8fd0beb9-c347-4b33-adab-acf2d3e87d2a","key":"installedPlugins","value":"[]","type":"plugin","created_at":1381740381332,"created_by":1,"updated_at":1452266167243,"updated_by":1},{"id":13,"uuid":"617e5dab-8b24-41e8-a2f4-fad38eee4dd6","key":"dbHash","value":"94ba61d6-ef98-4ed1-a3bc-688b82df8b3a","type":"core","created_at":1381740381424,"created_by":1,"updated_at":1381740381424,"updated_by":1}],"tags":[{"id":1,"uuid":"d6f9b3f0-78ad-4521-8148-0c7d37973eda","name":"Getting Started","slug":"getting-started","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1381740381271,"created_by":1,"updated_at":1381740381271,"updated_by":1},{"id":2,"uuid":"fad2ff4c-cffb-43ab-a330-b58636bb08e3","name":"node.js","slug":"node-js","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387164776046,"created_by":1,"updated_at":1387164776046,"updated_by":1},{"id":3,"uuid":"3a24d5ba-1146-499f-9a8f-ecd20ad7ed9e","name":"heroku","slug":"heroku","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387164776047,"created_by":1,"updated_at":1387164776047,"updated_by":1},{"id":4,"uuid":"c8047c5b-066b-46b7-8872-5e887962e7cc","name":"brunch.io","slug":"brunch-io","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387164776047,"created_by":1,"updated_at":1387164776047,"updated_by":1},{"id":5,"uuid":"ac72f239-1862-4fda-930e-1b62a531cf7d","name":"socket.io","slug":"socket-io","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387164776048,"created_by":1,"updated_at":1387164776048,"updated_by":1},{"id":6,"uuid":"c1f05c4e-5fcc-4ae0-b9ac-65afbe7718f2","name":"express.js","slug":"express-js","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387168385763,"created_by":1,"updated_at":1387168385763,"updated_by":1},{"id":7,"uuid":"2c6ef4f1-b1d3-453f-8e29-edf39d163ea6","name":"express","slug":"express","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387168385764,"created_by":1,"updated_at":1387168385764,"updated_by":1},{"id":8,"uuid":"6a508ac3-9750-4ef3-9a13-6dce6fe671db","name":"ember.js","slug":"ember-js","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387168460371,"created_by":1,"updated_at":1387168460371,"updated_by":1},{"id":9,"uuid":"c108dc6b-690c-4b27-b4a9-43172f63a7bd","name":"gordon chan","slug":"gordon-chan","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387168460371,"created_by":1,"updated_at":1387168460371,"updated_by":1},{"id":10,"uuid":"83ff6b5a-5ffd-4edc-a811-f7788e5f5534","name":"redis.io","slug":"redis-io","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387170316167,"created_by":1,"updated_at":1387170316167,"updated_by":1},{"id":11,"uuid":"996c372e-fcb8-48c9-a92e-d754626077aa","name":"redis to go","slug":"redis-to-go","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387170316168,"created_by":1,"updated_at":1387170316168,"updated_by":1},{"id":12,"uuid":"75033442-bbad-424b-ae7d-50f49fce7b93","name":"session","slug":"session","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387170316168,"created_by":1,"updated_at":1387170316168,"updated_by":1},{"id":13,"uuid":"cbb213b4-1321-47eb-b52f-c5b30f77d186","name":"passport.js","slug":"passport-js","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387170628120,"created_by":1,"updated_at":1387170628120,"updated_by":1},{"id":14,"uuid":"a61ce15e-18b1-4eeb-8610-9a9b27ecfec1","name":"oauth2","slug":"oauth2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387170628120,"created_by":1,"updated_at":1387170628120,"updated_by":1},{"id":15,"uuid":"34d8f2f3-e9f5-4b2e-ba6d-f6d9032f1b75","name":"Ember.js","slug":"ember-js-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387171762629,"created_by":1,"updated_at":1387171762629,"updated_by":1},{"id":16,"uuid":"1b58fd32-b7da-407d-97c4-4b29e84f4961","name":"ASP.NET","slug":"asp-net","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387173278218,"created_by":1,"updated_at":1387173278218,"updated_by":1},{"id":17,"uuid":"ecab064c-2a89-47aa-8f83-ed66223f634c","name":"WebAPI","slug":"webapi","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387173278219,"created_by":1,"updated_at":1387173278219,"updated_by":1},{"id":18,"uuid":"7f27f5d1-3e13-4dc2-8f94-1b5c1fd1efc0","name":"Dynamcis CRM","slug":"dynamcis-crm","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387173278219,"created_by":1,"updated_at":1387173278219,"updated_by":1},{"id":19,"uuid":"44787e59-bb9c-4b08-8128-cde162ac9955","name":"Ember Data","slug":"ember-data","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1387173278219,"created_by":1,"updated_at":1387173278219,"updated_by":1}],"posts_tags":[{"id":1,"post_id":1,"tag_id":1},{"id":2,"post_id":2,"tag_id":2},{"id":3,"post_id":2,"tag_id":3},{"id":4,"post_id":2,"tag_id":4},{"id":5,"post_id":2,"tag_id":5},{"id":6,"post_id":3,"tag_id":2},{"id":7,"post_id":3,"tag_id":3},{"id":8,"post_id":3,"tag_id":6},{"id":10,"post_id":5,"tag_id":2},{"id":11,"post_id":5,"tag_id":3},{"id":12,"post_id":5,"tag_id":5},{"id":13,"post_id":5,"tag_id":6},{"id":14,"post_id":5,"tag_id":8},{"id":19,"post_id":6,"tag_id":2},{"id":20,"post_id":6,"tag_id":3},{"id":21,"post_id":6,"tag_id":6},{"id":22,"post_id":6,"tag_id":10},{"id":23,"post_id":6,"tag_id":11},{"id":24,"post_id":6,"tag_id":12},{"id":25,"post_id":7,"tag_id":2},{"id":26,"post_id":7,"tag_id":13},{"id":27,"post_id":7,"tag_id":14},{"id":28,"post_id":8,"tag_id":15},{"id":29,"post_id":8,"tag_id":16},{"id":30,"post_id":8,"tag_id":17},{"id":31,"post_id":8,"tag_id":18},{"id":32,"post_id":8,"tag_id":19}]}}